```razor
@rendermode InteractiveServer

<div class="image-container mb-2 position-relative">
    <img src="@PreviewUrl" class="img-thumbnail" alt="Image preview" />
    @if (PreviewUrl != DefaultImageUrl)
    {
        <button type="button"
                class="btn btn-sm btn-danger position-absolute"
                @onclick="ClearImage">
            Видалити
        </button>
    }
</div>

<div class="file-drop-zone @_hoverClass"
     @ondragenter="OnDragEnter"
     @ondragleave="OnDragLeave"
     @ondragover="OnDragEnter">
    <InputFile OnChange="@OnInputFileChange" />
</div>

@code {
    /// <summary>
    /// Компонент для завантаження та відображення зображень із підтримкою drag-and-drop.
    /// </summary>
    private const string DefaultImageUrl = "/images/NoImage.png";

    /// <summary>
    /// URL для відображення прев’ю зображення. Вибирає _previewUrl, ImageUrl або заглушку.
    /// </summary>
    private string PreviewUrl => _previewUrl ?? ImageUrl ?? DefaultImageUrl;

    private string? _previewUrl;
    private string _hoverClass = string.Empty;
    private const long MaxFileSize = 30 * 1024 * 1024;

    /// <summary>
    /// URL раніше завантаженого зображення.
    /// </summary>
    [Parameter]
    public string? ImageUrl { get; set; }

    /// <summary>
    /// Подія, що викликається при виборі або очищенні зображення.
    /// </summary>
    [Parameter]
    public EventCallback<IBrowserFile> OnImageSelected { get; set; }

    [Inject]
    private IJSRuntime JsRuntime { get; set; } = default!;

    private void OnDragEnter(DragEventArgs e) => _hoverClass = "hover";
    private void OnDragLeave(DragEventArgs e) => _hoverClass = string.Empty;

    /// <summary>
    /// Обробляє вибір файлу через InputFile, генерує прев’ю та викликає подію OnImageSelected.
    /// </summary>
    /// <param name="e">Подія вибору файлу.</param>
    /// <returns>Завдання, що завершується після обробки файлу.</returns>
    /// <example>
    /// // У батьківському компоненті
    /// async Task HandleImageSelected(IBrowserFile file)
    /// {
    ///     if (file != null) { await SaveImage(file); }
    /// }
    /// </example>
    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file == null) return;

        try
        {
            using var stream = file.OpenReadStream(maxAllowedSize: MaxFileSize);
            using var ms = new MemoryStream();
            await stream.CopyToAsync(ms);

            var base64 = Convert.ToBase64String(ms.ToArray());
            _previewUrl = $"data:{file.ContentType};base64,{base64}";

            await OnImageSelected.InvokeAsync(file);
        }
        catch (Exception)
        {
            _previewUrl = DefaultImageUrl;
        }
    }

    /// <summary>
    /// Очищає поточне зображення, скидає InputFile і викликає подію OnImageSelected.
    /// </summary>
    /// <returns>Завдання, що завершується після очищення.</returns>
    /// <example>
    /// // Виклик у компоненті
    /// await ClearImage();
    /// // Скидає прев’ю до /images/NoImage.png
    /// </example>
    private async Task ClearImage()
    {
        _previewUrl = DefaultImageUrl;
        await OnImageSelected.InvokeAsync(null);
        await JsRuntime.InvokeVoidAsync("eval",
            "document.querySelector('input[type=file]').value = ''");
    }
}
```