@rendermode InteractiveServer

<div class="image-container mb-2 position-relative">
	<img src="@PreviewUrl" class="img-thumbnail" />
	@if (PreviewUrl != "/images/NoImage.png")
	{
		<button type="button" class="btn btn-sm btn-danger position-absolute" @onclick="ClearImage">Видалити</button>
	}
</div>

<div class="file-drop-zone @_hoverClass"
     @ondragenter="OnDragEnter"
     @ondragleave="OnDragLeave" @ondragover="OnDragEnter">

	<InputFile OnChange="@OnInputFileChange" />
</div>

@code {
	private string PreviewUrl => string.IsNullOrEmpty(_previewUrl) ? (string.IsNullOrEmpty(ImageUrl) ? "/images/NoImage.png" : ImageUrl) : _previewUrl;
	private string? _previewUrl;
	private string _hoverClass = string.Empty;


	void OnDragEnter(DragEventArgs e) => _hoverClass = "hover";
	void OnDragLeave(DragEventArgs e) => _hoverClass = string.Empty;

	[Parameter]
	public string? ImageUrl { get; set; }

	[Parameter]
	public EventCallback<IBrowserFile> OnImageSelected { get; set; }

	[Inject]
	private IJSRuntime JsRuntime { get; set; } = default!;

	private async Task OnInputFileChange(InputFileChangeEventArgs e)
	{
		var file = e.File;
		if (file != null)
		{
			using var stream = file.OpenReadStream(maxAllowedSize: 30 * 1024 * 1024);
			using var ms = new MemoryStream();
			await stream.CopyToAsync(ms);
			var base64 = Convert.ToBase64String(ms.ToArray());

			_previewUrl = $"data:{file.ContentType};base64,{base64}";

			await OnImageSelected.InvokeAsync(file);
		}
	}

	private async Task ClearImage()
	{
		_previewUrl = "/images/NoImage.png";

		await OnImageSelected.InvokeAsync(null);
		await JsRuntime.InvokeVoidAsync("eval", "document.querySelector('input[type=file]').value = ''");
	}
}